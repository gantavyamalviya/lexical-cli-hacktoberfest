'use strict';

const React = require('react');

const {
  Box,
  Text
} = require('ink');

const axios = require('axios');

const App = ({
  name = 'oblivion'
}) => {
  const [lexiconData, setlexiconData] = React.useState(null);

  const lexicon = name => {
    const url = `https://api.dictionaryapi.dev/api/v2/entries/en/${name}`;
    return axios.get(url).then(response => response.data).then(data => {
      return data[0];
    });
  };

  React.useEffect(() => {
    lexicon(name).then(data => {
      setlexiconData(data);
    });
  }, [name]);
  return lexiconData && /*#__PURE__*/React.createElement(Box, null, /*#__PURE__*/React.createElement(Text, null, /*#__PURE__*/React.createElement(Text, {
    color: "yellowBright"
  }, "Word:"), " ", /*#__PURE__*/React.createElement(Text, {
    bold: true,
    color: "magentaBright"
  }, lexiconData?.word.toUpperCase()), "\n", /*#__PURE__*/React.createElement(Text, {
    color: "yellowBright"
  }, "Definition:"), " ", /*#__PURE__*/React.createElement(Text, {
    color: "greenBright",
    bold: true
  }, lexiconData?.meanings.map(meanings => meanings.definitions[0].definition)), "\n", /*#__PURE__*/React.createElement(Text, {
    color: "yellowBright"
  }, "Synonym:"), " ", /*#__PURE__*/React.createElement(Text, {
    color: "greenBright",
    bold: true
  }, lexiconData?.meanings.map(meanings => meanings.synonyms[0])), "\n", /*#__PURE__*/React.createElement(Text, {
    color: "yellowBright"
  }, "Antonym:"), " ", /*#__PURE__*/React.createElement(Text, {
    color: "greenBright",
    bold: true
  }, lexiconData?.meanings.map(meanings => meanings.antonyms[0])))) || /*#__PURE__*/React.createElement(Text, null, "Loading...");
};

module.exports = App;
{
  /* {wordbook?.map((wordbook) => wordbook.word)} */
}
{
  /* {pokemonData?.types.map((type: Type) => type.type.name).join(", ")} */
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJSZWFjdCIsInJlcXVpcmUiLCJCb3giLCJUZXh0IiwiYXhpb3MiLCJBcHAiLCJuYW1lIiwibGV4aWNvbkRhdGEiLCJzZXRsZXhpY29uRGF0YSIsInVzZVN0YXRlIiwibGV4aWNvbiIsInVybCIsImdldCIsInRoZW4iLCJyZXNwb25zZSIsImRhdGEiLCJ1c2VFZmZlY3QiLCJ3b3JkIiwidG9VcHBlckNhc2UiLCJtZWFuaW5ncyIsIm1hcCIsImRlZmluaXRpb25zIiwiZGVmaW5pdGlvbiIsInN5bm9ueW1zIiwiYW50b255bXMiLCJtb2R1bGUiLCJleHBvcnRzIl0sInNvdXJjZXMiOlsidWkuanMiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuY29uc3QgUmVhY3QgPSByZXF1aXJlKCdyZWFjdCcpO1xuY29uc3QgeyBCb3gsIFRleHQgfSA9IHJlcXVpcmUoJ2luaycpO1xuY29uc3QgYXhpb3MgPSByZXF1aXJlKCdheGlvcycpO1xuXG5jb25zdCBBcHAgPSAoeyBuYW1lID0gJ29ibGl2aW9uJyB9KSA9PiB7XG5cdGNvbnN0IFtsZXhpY29uRGF0YSwgc2V0bGV4aWNvbkRhdGFdID0gUmVhY3QudXNlU3RhdGUobnVsbCk7XG5cblx0Y29uc3QgbGV4aWNvbiA9IG5hbWUgPT4ge1xuXHRcdGNvbnN0IHVybCA9IGBodHRwczovL2FwaS5kaWN0aW9uYXJ5YXBpLmRldi9hcGkvdjIvZW50cmllcy9lbi8ke25hbWV9YDtcblxuXHRcdHJldHVybiBheGlvcy5nZXQodXJsKS50aGVuKHJlc3BvbnNlID0+IHJlc3BvbnNlLmRhdGEpLnRoZW4oKGRhdGEpID0+IHtcblxuXHRcdFx0cmV0dXJuIGRhdGFbMF07XG5cblx0XHR9KVxuXHR9XG5cblx0UmVhY3QudXNlRWZmZWN0KCgpID0+IHtcblx0XHRsZXhpY29uKG5hbWUpLnRoZW4oZGF0YSA9PiB7XG5cblx0XHRcdHNldGxleGljb25EYXRhKGRhdGEpXG5cdFx0fSlcblxuXHR9LCBbbmFtZV0pO1xuXG5cblxuXG5cblxuXHRyZXR1cm4gKFxuXHRcdChsZXhpY29uRGF0YSAmJiAoXG5cdFx0XHQ8IEJveCA+XG5cdFx0XHRcdDxUZXh0PlxuXHRcdFx0XHRcdDxUZXh0IGNvbG9yPVwieWVsbG93QnJpZ2h0XCI+V29yZDo8L1RleHQ+e1wiIFwifVxuXHRcdFx0XHRcdDxUZXh0IGJvbGQgY29sb3I9XCJtYWdlbnRhQnJpZ2h0XCI+XG5cdFx0XHRcdFx0XHR7bGV4aWNvbkRhdGE/LndvcmQudG9VcHBlckNhc2UoKX1cblx0XHRcdFx0XHQ8L1RleHQ+XG5cdFx0XHRcdFx0e1wiXFxuXCJ9XG5cdFx0XHRcdFx0PFRleHQgY29sb3I9XCJ5ZWxsb3dCcmlnaHRcIj5EZWZpbml0aW9uOjwvVGV4dD57XCIgXCJ9XG5cdFx0XHRcdFx0PFRleHQgY29sb3I9XCJncmVlbkJyaWdodFwiIGJvbGQ+XG5cdFx0XHRcdFx0XHR7bGV4aWNvbkRhdGE/Lm1lYW5pbmdzLm1hcCgobWVhbmluZ3MpID0+IG1lYW5pbmdzLmRlZmluaXRpb25zWzBdLmRlZmluaXRpb24pfVxuXHRcdFx0XHRcdDwvVGV4dD5cblx0XHRcdFx0XHR7XCJcXG5cIn1cblx0XHRcdFx0XHQ8VGV4dCBjb2xvcj1cInllbGxvd0JyaWdodFwiPlN5bm9ueW06PC9UZXh0PntcIiBcIn1cblx0XHRcdFx0XHQ8VGV4dCBjb2xvcj1cImdyZWVuQnJpZ2h0XCIgYm9sZD5cblx0XHRcdFx0XHRcdHtsZXhpY29uRGF0YT8ubWVhbmluZ3MubWFwKChtZWFuaW5ncykgPT4gbWVhbmluZ3Muc3lub255bXNbMF0pfVxuXHRcdFx0XHRcdDwvVGV4dD5cblx0XHRcdFx0XHR7XCJcXG5cIn1cblx0XHRcdFx0XHQ8VGV4dCBjb2xvcj1cInllbGxvd0JyaWdodFwiPkFudG9ueW06PC9UZXh0PntcIiBcIn1cblx0XHRcdFx0XHQ8VGV4dCBjb2xvcj1cImdyZWVuQnJpZ2h0XCIgYm9sZD5cblx0XHRcdFx0XHRcdHtsZXhpY29uRGF0YT8ubWVhbmluZ3MubWFwKChtZWFuaW5ncykgPT4gbWVhbmluZ3MuYW50b255bXNbMF0pfVxuXHRcdFx0XHRcdDwvVGV4dD5cblx0XHRcdFx0PC9UZXh0PlxuXHRcdFx0PC9Cb3ggPlxuXHRcdCkpIHx8IDxUZXh0PkxvYWRpbmcuLi48L1RleHQ+XG5cdCk7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IEFwcDtcblxuXG5cblxuXG5cblxuXG5cbnsvKiB7d29yZGJvb2s/Lm1hcCgod29yZGJvb2spID0+IHdvcmRib29rLndvcmQpfSAqLyB9XG57Lyoge3Bva2Vtb25EYXRhPy50eXBlcy5tYXAoKHR5cGU6IFR5cGUpID0+IHR5cGUudHlwZS5uYW1lKS5qb2luKFwiLCBcIil9ICovIH0iXSwibWFwcGluZ3MiOiJBQUFBOztBQUNBLE1BQU1BLEtBQUssR0FBR0MsT0FBTyxDQUFDLE9BQUQsQ0FBckI7O0FBQ0EsTUFBTTtFQUFFQyxHQUFGO0VBQU9DO0FBQVAsSUFBZ0JGLE9BQU8sQ0FBQyxLQUFELENBQTdCOztBQUNBLE1BQU1HLEtBQUssR0FBR0gsT0FBTyxDQUFDLE9BQUQsQ0FBckI7O0FBRUEsTUFBTUksR0FBRyxHQUFHLENBQUM7RUFBRUMsSUFBSSxHQUFHO0FBQVQsQ0FBRCxLQUEyQjtFQUN0QyxNQUFNLENBQUNDLFdBQUQsRUFBY0MsY0FBZCxJQUFnQ1IsS0FBSyxDQUFDUyxRQUFOLENBQWUsSUFBZixDQUF0Qzs7RUFFQSxNQUFNQyxPQUFPLEdBQUdKLElBQUksSUFBSTtJQUN2QixNQUFNSyxHQUFHLEdBQUksbURBQWtETCxJQUFLLEVBQXBFO0lBRUEsT0FBT0YsS0FBSyxDQUFDUSxHQUFOLENBQVVELEdBQVYsRUFBZUUsSUFBZixDQUFvQkMsUUFBUSxJQUFJQSxRQUFRLENBQUNDLElBQXpDLEVBQStDRixJQUEvQyxDQUFxREUsSUFBRCxJQUFVO01BRXBFLE9BQU9BLElBQUksQ0FBQyxDQUFELENBQVg7SUFFQSxDQUpNLENBQVA7RUFLQSxDQVJEOztFQVVBZixLQUFLLENBQUNnQixTQUFOLENBQWdCLE1BQU07SUFDckJOLE9BQU8sQ0FBQ0osSUFBRCxDQUFQLENBQWNPLElBQWQsQ0FBbUJFLElBQUksSUFBSTtNQUUxQlAsY0FBYyxDQUFDTyxJQUFELENBQWQ7SUFDQSxDQUhEO0VBS0EsQ0FORCxFQU1HLENBQUNULElBQUQsQ0FOSDtFQWFBLE9BQ0VDLFdBQVcsaUJBQ1gsb0JBQUUsR0FBRixxQkFDQyxvQkFBQyxJQUFELHFCQUNDLG9CQUFDLElBQUQ7SUFBTSxLQUFLLEVBQUM7RUFBWixXQURELEVBQ3lDLEdBRHpDLGVBRUMsb0JBQUMsSUFBRDtJQUFNLElBQUksTUFBVjtJQUFXLEtBQUssRUFBQztFQUFqQixHQUNFQSxXQUFXLEVBQUVVLElBQWIsQ0FBa0JDLFdBQWxCLEVBREYsQ0FGRCxFQUtFLElBTEYsZUFNQyxvQkFBQyxJQUFEO0lBQU0sS0FBSyxFQUFDO0VBQVosaUJBTkQsRUFNK0MsR0FOL0MsZUFPQyxvQkFBQyxJQUFEO0lBQU0sS0FBSyxFQUFDLGFBQVo7SUFBMEIsSUFBSTtFQUE5QixHQUNFWCxXQUFXLEVBQUVZLFFBQWIsQ0FBc0JDLEdBQXRCLENBQTJCRCxRQUFELElBQWNBLFFBQVEsQ0FBQ0UsV0FBVCxDQUFxQixDQUFyQixFQUF3QkMsVUFBaEUsQ0FERixDQVBELEVBVUUsSUFWRixlQVdDLG9CQUFDLElBQUQ7SUFBTSxLQUFLLEVBQUM7RUFBWixjQVhELEVBVzRDLEdBWDVDLGVBWUMsb0JBQUMsSUFBRDtJQUFNLEtBQUssRUFBQyxhQUFaO0lBQTBCLElBQUk7RUFBOUIsR0FDRWYsV0FBVyxFQUFFWSxRQUFiLENBQXNCQyxHQUF0QixDQUEyQkQsUUFBRCxJQUFjQSxRQUFRLENBQUNJLFFBQVQsQ0FBa0IsQ0FBbEIsQ0FBeEMsQ0FERixDQVpELEVBZUUsSUFmRixlQWdCQyxvQkFBQyxJQUFEO0lBQU0sS0FBSyxFQUFDO0VBQVosY0FoQkQsRUFnQjRDLEdBaEI1QyxlQWlCQyxvQkFBQyxJQUFEO0lBQU0sS0FBSyxFQUFDLGFBQVo7SUFBMEIsSUFBSTtFQUE5QixHQUNFaEIsV0FBVyxFQUFFWSxRQUFiLENBQXNCQyxHQUF0QixDQUEyQkQsUUFBRCxJQUFjQSxRQUFRLENBQUNLLFFBQVQsQ0FBa0IsQ0FBbEIsQ0FBeEMsQ0FERixDQWpCRCxDQURELENBREQsaUJBd0JNLG9CQUFDLElBQUQscUJBekJQO0FBMkJBLENBckREOztBQXVEQUMsTUFBTSxDQUFDQyxPQUFQLEdBQWlCckIsR0FBakI7QUFVQTtFQUFDO0FBQW9EO0FBQ3JEO0VBQUM7QUFBMkUifQ==